<?php

namespace MusahMusah\LaravelMultipaymentGateways\Traits\Flutterwave;

trait TransactionTrait
{
    const TRANSACTION_ENDPOINT = '/transactions/';

    const REFUND_ENDPOINT = '/refunds/';

    /**
     * Verify a transaction.
     *
     * This endpoint helps developers to query the final status of a transaction.
     * This can be used to check transactions of all payment types after they have been attempted.
     *
     * @param  string  $transactionId The ID of the transaction to be verified.
     */
    public function verifyTransaction(string $transactionId): array
    {
        $endpoint = sprintf('%s%s%s/verify', $this->baseUri, self::TRANSACTION_ENDPOINT, $transactionId);

        $transactionData = $this->makeRequest(
            method: 'GET',
            requestUrl: $endpoint,
            isJsonRequest: true
        );

        return $transactionData;
    }

    /**
     * Create a refund for a disputed transaction.
     *
     * @param  string  $transactionId The ID of the transaction to be verified.
     * @param  array  $formParams An associative array of refund data.
     */
    public function createTransactionRefund(string $transactionId, $formParams = []): array
    {
        $endpoint = sprintf('%s%s%s/refund', $this->baseUri, self::TRANSACTION_ENDPOINT, $transactionId);

        $transactionData = $this->makeRequest(
            method: 'POST',
            requestUrl: $endpoint,
            formParams: $formParams,
            isJsonRequest: true
        );

        return $transactionData;
    }

    /**
     * Get multiple transactions
     *
     * @param  array  $queryParams Query parameters for filtering and pagination
     */
    public function getTransactions(array $queryParams = []): array
    {
        $endpoint = sprintf('%s%s', $this->baseUri, self::TRANSACTION_ENDPOINT);

        $transactionData = $this->makeRequest(
            method: 'GET',
            requestUrl: $endpoint,
            queryParams: $queryParams,
            isJsonRequest: true
        );

        return $transactionData;
    }

    /**
     * Get multiple refund transactions
     *
     * @param  array  $queryParams Query parameters for filtering and pagination
     */
    public function getRefundTransactions(array $queryParams = []): array
    {
        $endpoint = sprintf('%s%s', $this->baseUri, self::REFUND_ENDPOINT);

        $refundData = $this->makeRequest(
            method: 'GET',
            requestUrl: $endpoint,
            queryParams: $queryParams,
            isJsonRequest: true
        );

        return $refundData;
    }

    /**
     * Get multiple refund transactions
     *
     * @param  string  $refundId This is a unique reference for the refunded transaction
     */
    public function getRefundDetails(string $refundId): array
    {
        $endpoint = sprintf('%s%s%s', $this->baseUri, self::REFUND_ENDPOINT, $refundId);

        $refundData = $this->makeRequest(
            method: 'GET',
            requestUrl: $endpoint,
            isJsonRequest: true
        );

        return $refundData;
    }

    /**
     * Get the transaction fees for a particular amount and currency
     */
    public function getTransactionFee(array $queryParams): array
    {
        $endpoint = sprintf('%s%s/fee', $this->baseUri, self::TRANSACTION_ENDPOINT);

        $transactionFeeData = $this->makeRequest(
            method: 'GET',
            requestUrl: $endpoint,
            queryParams: $queryParams,
            isJsonRequest: true
        );

        return $transactionFeeData;
    }

    /**
     * Resend failed webhooks to your server for a specific transaction.
     *
     * @param  string  $transactionId This is a unique reference for the refunded transaction
     * @param  array  $formParams An associative array of retry data.
     */
    public function resendFailedWebhook(string $transactionId, $formParams = []): array
    {
        $endpoint = sprintf('%s%s%s/resend-hook', $this->baseUri, self::TRANSACTION_ENDPOINT, $transactionId);

        $retryData = $this->makeRequest(
            method: 'POST',
            requestUrl: $endpoint,
            formParams: $formParams,
            isJsonRequest: true
        );

        return $retryData;
    }

    /**
     * View transaction timeline
     *
     * @param  string  $transactionId This is a unique transaction identifier generated by our systems
     * @return array
     */
    public function viewTransactionTimeline(string $transactionId)
    {
        $endpoint = sprintf('%s%s%s/events', $this->baseUri, self::TRANSACTION_ENDPOINT, $transactionId);

        $transactionTimelineData = $this->makeRequest(
            method: 'GET',
            requestUrl: $endpoint,
            isJsonRequest: true
        );

        return $transactionTimelineData;
    }
}
